---
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - prefer_relative_imports
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
analyzer:
  plugins: [custom_lint]
  exclude: ['**/*.g.dart', '**/*.freezed.dart']
  errors:
    invalid_annotation_target: ignore  # False positives with Freezed annotations
    missing_required_param: error
    missing_return: error
    must_be_immutable: error
    require_trailing_commas: warning
    use_build_context_synchronously: warning  # sometimes false positives
    public_member_api_docs: ignore
    argument_type_not_assignable: ignore  # Otherwise it gets too expressive.
    #    return_of_invalid_type: ignore  # Duplicate information in type-cast.
    omit_local_variable_types: ignore  # Always specify types!
    always_specify_types: warning  # Always specify types!
    avoid_redundant_argument_values: ignore  # Redundant arguments can be helpful.
    avoid_void_async: ignore  # Sometimes we want to make explicit, that an operation does not
    # require waiting.
    use_setters_to_change_properties: ignore  # notifier.state = ... cannot be accessed everywhere.
    one_member_abstracts: ignore  # This is useful.
    prefer_relative_imports: info  # Relative imports.
    always_use_package_imports: ignore  # Relative imports.
    lines_longer_than_80_chars: ignore  # Maybe enable later.
    dangling_library_doc_comments: ignore  # Not relevant.
    sort_pub_dependencies: ignore  # Can be ignored.
    directives_ordering: ignore  # This is not possible using flutter_import_sorter.
    avoid_catches_without_on_clauses: false # TODO(Raphael): Set avoid_catches_without_on_clauses: true and refactor code.
custom_lint:
  rules:
    # TODO(Raphael): Enable and refactor sometime in the future:
    - avoid_public_notifier_properties: false  # Enable later.
    # TODO(Raphael): Set avoid_build_context_in_providers: true and refactor code.
    - avoid_build_context_in_providers: false
formatter:
  page_width: 100
